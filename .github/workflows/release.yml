name: Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: "20"
  BACKEND_MODE: "process"
  RUST_WORKSPACE_MEMBER: "core"
  APP_NAME: "the-great-combinator"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      TARGET_TRIPLE: ${{ (matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64') && 'aarch64-unknown-linux-gnu' || (matrix.os == 'ubuntu-latest' && matrix.arch == 'x64') && 'x86_64-unknown-linux-gnu' || (matrix.os == 'macos-latest' && matrix.arch == 'arm64') && 'aarch64-apple-darwin' || (matrix.os == 'macos-latest' && matrix.arch == 'x64') && 'x86_64-apple-darwin' || (matrix.os == 'windows-latest' && matrix.arch == 'x64') && 'x86_64-pc-windows-msvc' || 'x86_64-pc-windows-msvc' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JS deps
        working-directory: vscode-ext
        run: npm ci

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.TARGET_TRIPLE }}

      - name: Cache Cargo (rust-cache)
        uses: Swatinem/rust-cache@v2

      - name: Build Rust backend (process)
        if: env.BACKEND_MODE == 'process'
        run: |
          cargo build -p $RUST_WORKSPACE_MEMBER --release --target $TARGET_TRIPLE
          mkdir -p dist/bin/${{ runner.os }}-${{ matrix.arch }}
          BIN="$PWD/target/$TARGET_TRIPLE/release/${APP_NAME}"
          if [ "${{ runner.os }}" = "Windows" ]; then BIN="${BIN}.exe"; fi
          cp "$BIN" "dist/bin/${{ runner.os }}-${{ matrix.arch }}/"

      - name: Build native addon (napi)
        if: env.BACKEND_MODE == 'napi'
        run: |
          pushd vscode-ext || true
          npm run -s build:napi -- --target $TARGET_TRIPLE || true
          popd || true
          mkdir -p dist/native/${{ runner.os }}-${{ matrix.arch }}
          echo "Please copy .node files into dist/native/..."

      - name: Build WASM (web)
        if: env.BACKEND_MODE == 'web'
        run: |
          rustup target add wasm32-wasi || true
          cargo build -p $RUST_WORKSPACE_MEMBER --release --target wasm32-wasi
          mkdir -p dist/web
          cp target/wasm32-wasi/release/${APP_NAME}.wasm dist/web/ || true

      - name: Bundle extension
        working-directory: vscode-ext
        run: npm run -s build

      - name: Package VSIX
        working-directory: vscode-ext
        run: |
          npm i -g @vscode/vsce ovsx
          mkdir -p dist
          vsce package -o ../dist/extension-${{ runner.os }}-${{ matrix.arch }}.vsix

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ runner.os }}-${{ matrix.arch }}
          path: dist/**

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/extension-*.vsix
            artifacts/**/bin/**/*
            artifacts/**/native/**/*
            artifacts/**/web/**/*
          generate_release_notes: true

      - name: Publish to VS Code Marketplace
        if: env.VSCE_PUBLISH == 'true'
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          npm i -g @vscode/vsce
          VSIX=$(ls artifacts/**/extension-*.vsix | head -n1)
          vsce publish --packagePath "$VSIX"

      - name: Publish to Open VSX
        if: env.OVSX_PUBLISH == 'true'
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          npm i -g ovsx
          VSIX=$(ls artifacts/**/extension-*.vsix | head -n1)
          ovsx publish "$VSIX" -p "$OVSX_PAT"
