name: CI
on:
  pull_request:
    branches: [ main ]
    paths:
      - "vscode-ext/**"
      - "core/**"
      - "Cargo.toml"
      - "package.json"
      - "pnpm-lock.yaml"
      - "package-lock.json"
      - ".github/workflows/ci.yml"
  push:
    branches: [ main ]

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  RUST_BACKTRACE: "1"
  BACKEND_MODE: "process" # process | napi | web
  RUST_WORKSPACE_MEMBER: "core"
  APP_NAME: "the-great-combinator"

jobs:
  lint_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (toolchain)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo (rust-cache)
        uses: Swatinem/rust-cache@v2

      - name: Install cross toolchain for aarch64 (Ubuntu)
        if: contains(env.TARGET_TRIPLE, 'aarch64-unknown-linux-gnu') && matrix.os == 'ubuntu-latest'
        run: |
          echo "Installing cross toolchain for aarch64"
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-dev-arm64-cross
          echo "Setting cargo linker env vars"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Rust clippy
        run: |
          # If RUST_WORKSPACE_MEMBER is a path, run clippy via manifest-path
          if [ -f "$RUST_WORKSPACE_MEMBER/Cargo.toml" ]; then
            cargo clippy --manifest-path $RUST_WORKSPACE_MEMBER/Cargo.toml --all-targets -- -D warnings
          else
            cargo clippy --workspace --all-targets -- -D warnings
          fi

      - name: Rust tests
        run: |
          if [ -f "$RUST_WORKSPACE_MEMBER/Cargo.toml" ]; then
            cargo test --manifest-path $RUST_WORKSPACE_MEMBER/Cargo.toml --all-features
          else
            cargo test --workspace --all-features
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JS deps
        working-directory: vscode-ext
        run: |
          # Prefer deterministic install when lockfile exists
          if [ -f package-lock.json ] ; then
            npm ci
          else
            echo "package-lock.json not found in vscode-ext, running 'npm install' as fallback"
            npm install
          fi

      - name: JS/TS build (dry)
        working-directory: vscode-ext
        run: npm run -s build

      - name: JS/TS tests
        working-directory: vscode-ext
        run: npm test --if-present

  build_matrix:
    needs: [lint_test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      TARGET_TRIPLE: ${{ (matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64') && 'aarch64-unknown-linux-gnu' || (matrix.os == 'ubuntu-latest' && matrix.arch == 'x64') && 'x86_64-unknown-linux-gnu' || (matrix.os == 'macos-latest' && matrix.arch == 'arm64') && 'aarch64-apple-darwin' || (matrix.os == 'macos-latest' && matrix.arch == 'x64') && 'x86_64-apple-darwin' || (matrix.os == 'windows-latest' && matrix.arch == 'x64') && 'x86_64-pc-windows-msvc' || 'x86_64-pc-windows-msvc' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install cross toolchain for aarch64 (Ubuntu)
        if: contains(env.TARGET_TRIPLE, 'aarch64-unknown-linux-gnu') && matrix.os == 'ubuntu-latest'
        run: |
          echo "Installing cross toolchain for aarch64"
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-dev-arm64-cross
          echo "Setting cargo linker env vars"
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install JS deps
        working-directory: vscode-ext
        run: |
          # If you use pnpm, replace this block with pnpm install --frozen-lockfile
          if [ -f package-lock.json ] ; then
            npm ci
          else
            echo "package-lock.json not found in vscode-ext, running 'npm install' as fallback"
            npm install
          fi

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ env.TARGET_TRIPLE }}

      - name: Cache Cargo (rust-cache)
        uses: Swatinem/rust-cache@v2

      - name: Build Rust backend (process)
        if: env.BACKEND_MODE == 'process'
        run: |
          set -euxo pipefail
      
          # Собираем все бинарные цели под конкретный таргет
          if [ -f "$RUST_WORKSPACE_MEMBER/Cargo.toml" ]; then
            cargo build --locked --manifest-path "$RUST_WORKSPACE_MEMBER/Cargo.toml" --release --target "$TARGET_TRIPLE" --bins
            TARGET_DIR="$RUST_WORKSPACE_MEMBER/target/$TARGET_TRIPLE/release"
          else
            cargo build --locked -p "$RUST_WORKSPACE_MEMBER" --release --target "$TARGET_TRIPLE" --bins
            TARGET_DIR="target/$TARGET_TRIPLE/release"
          fi
      
          mkdir -p "dist/bin/${{ runner.os }}-${{ matrix.arch }}"
          shopt -s nullglob
          copied=0
      
          if [ "${{ runner.os }}" = "Windows" ]; then
            for f in "$TARGET_DIR"/*.exe; do
              cp "$f" "dist/bin/${{ runner.os }}-${{ matrix.arch }}/"
              copied=$((copied+1))
            done
          else
            # берём только исполняемые файлы (исключая *.d, *.rlib и т.п.)
            for f in "$TARGET_DIR"/*; do
              if [ -f "$f" ] && [ -x "$f" ]; then
                cp "$f" "dist/bin/${{ runner.os }}-${{ matrix.arch }}/"
                copied=$((copied+1))
              fi
            done
          fi
  
          if [ "$copied" -eq 0 ]; then
            echo "::error::No executables were found in $TARGET_DIR"
            echo "Contents of $TARGET_DIR:"
            ls -la "$TARGET_DIR" || true
            exit 1
          fi

      - name: Build native addon via napi-rs (napi)
        if: env.BACKEND_MODE == 'napi'
        run: |
          # ожидается наличие соответствующего crate и npm script (например build:napi)
          pushd vscode-ext || true
          npm run -s build:napi -- --target $TARGET_TRIPLE || true
          popd || true
          mkdir -p dist/native/${{ runner.os }}-${{ matrix.arch }}
          echo "Please copy the generated .node files into dist/native/..."

      - name: Build WASM (web)
        if: env.BACKEND_MODE == 'web'
        run: |
          rustup target add wasm32-wasi || true
          if [ -f "$RUST_WORKSPACE_MEMBER/Cargo.toml" ]; then
            cargo build --locked --manifest-path $RUST_WORKSPACE_MEMBER/Cargo.toml --release --target wasm32-wasi
            cp $RUST_WORKSPACE_MEMBER/target/wasm32-wasi/release/${APP_NAME}.wasm dist/web/ || true
          else
            cargo build --locked -p $RUST_WORKSPACE_MEMBER --release --target wasm32-wasi
            cp target/wasm32-wasi/release/${APP_NAME}.wasm dist/web/ || true
          fi

      - name: Build extension bundle
        working-directory: vscode-ext
        run: npm run -s build

      - name: Package VSIX
        working-directory: vscode-ext
        run: |
          npm i -g @vscode/vsce
          mkdir -p dist
          vsce package -o ../dist/extension-${{ runner.os }}-${{ matrix.arch }}.vsix

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}-${{ matrix.arch }}
          path: |
            dist/**
